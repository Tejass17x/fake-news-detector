import requests
import json
from typing import Dict, Any, Optional
from config import Config

class GeminiAIClient:
    """Client for Google Gemini AI API to enhance news analysis with advanced AI"""
    
    def __init__(self):
        self.api_key = Config.GEMINI_API_KEY
        self.base_url = Config.GEMINI_API_URL
    
    def analyze_news_credibility(self, title: str, content: str = None) -> Dict[str, Any]:
        """
        Use Gemini AI to analyze news credibility with advanced reasoning
        
        Args:
            title: News article title/headline
            content: News article content (optional)
        
        Returns:
            Dict with AI analysis results
        """
        if not self.api_key:
            return {"status": "error", "message": "Gemini API key not configured"}
        
        # Construct the analysis prompt
        text_to_analyze = f"Title: {title}"
        if content:
            # Limit content length to avoid token limits
            content_preview = content[:2000] + "..." if len(content) > 2000 else content
            text_to_analyze += f"\\nContent: {content_preview}"
        
        prompt = f"""
As an expert fact-checker and media analyst, please analyze this news article for credibility and potential misinformation. Consider the following factors:

1. **Source Credibility**: Is this from a reliable news source?
2. **Content Quality**: Are there specific, verifiable facts?
3. **Language Analysis**: Look for emotional manipulation, clickbait, or bias
4. **Logical Consistency**: Does the information make logical sense?
5. **Red Flags**: Identify any suspicious patterns or claims

News Article:
{text_to_analyze}

Please provide your analysis in the following JSON format:
{{
    "credibility_score": [0.0-1.0],
    "credibility_level": "[Very Low|Low|Medium|High|Very High]",
    "key_findings": [
        "finding 1",
        "finding 2",
        "finding 3"
    ],
    "red_flags": [
        "red flag 1 (if any)",
        "red flag 2 (if any)"
    ],
    "verification_suggestions": [
        "suggestion 1",
        "suggestion 2"
    ],
    "reasoning": "Brief explanation of your assessment"
}}

Respond only with the JSON, no additional text.
        """
        
        try:
            # Prepare request data
            request_data = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.1,  # Low temperature for consistent, factual responses
                    "topK": 1,
                    "topP": 0.8,
                    "maxOutputTokens": 1000,
                }
            }
            
            # Make API request
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers={
                    'Content-Type': 'application/json',
                },
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # Extract the generated text
                if 'candidates' in result and result['candidates']:
                    generated_text = result['candidates'][0]['content']['parts'][0]['text']
                    
                    # Try to parse the JSON response
                    try:
                        # Clean up the response (remove any markdown formatting)
                        json_text = generated_text.strip()
                        if json_text.startswith('```json'):
                            json_text = json_text[7:]
                        if json_text.endswith('```'):
                            json_text = json_text[:-3]
                        json_text = json_text.strip()
                        
                        ai_analysis = json.loads(json_text)
                        ai_analysis['status'] = 'success'
                        ai_analysis['source'] = 'gemini_ai'
                        
                        return ai_analysis
                        
                    except json.JSONDecodeError as e:
                        return {
                            "status": "error", 
                            "message": f"Failed to parse AI response: {str(e)}",
                            "raw_response": generated_text
                        }
                else:
                    return {
                        "status": "error", 
                        "message": "No response generated by AI",
                        "full_response": result
                    }
            else:
                return {
                    "status": "error", 
                    "message": f"API request failed with status {response.status_code}",
                    "error_details": response.text
                }
                
        except Exception as e:
            return {
                "status": "error", 
                "message": f"Gemini API request failed: {str(e)}"
            }
    
    def summarize_article(self, title: str, content: str) -> Dict[str, Any]:
        """
        Generate a concise summary of the news article
        
        Args:
            title: Article title
            content: Article content
        
        Returns:
            Dict with summary and key points
        """
        if not self.api_key:
            return {"status": "error", "message": "Gemini API key not configured"}
        
        # Limit content length
        content_preview = content[:3000] + "..." if len(content) > 3000 else content
        
        prompt = f"""
Please provide a concise, objective summary of this news article. Focus on the key facts and main points without adding interpretation or bias.

Title: {title}
Content: {content_preview}

Provide your response in JSON format:
{{
    "summary": "2-3 sentence objective summary",
    "key_points": [
        "key point 1",
        "key point 2",
        "key point 3"
    ],
    "main_topic": "primary topic/category",
    "word_count": estimated_word_count
}}

Respond only with the JSON, no additional text.
        """
        
        try:
            request_data = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.2,
                    "maxOutputTokens": 500,
                }
            }
            
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers={'Content-Type': 'application/json'},
                json=request_data,
                timeout=20
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and result['candidates']:
                    generated_text = result['candidates'][0]['content']['parts'][0]['text']
                    
                    # Clean and parse JSON
                    json_text = generated_text.strip()
                    if json_text.startswith('```json'):
                        json_text = json_text[7:]
                    if json_text.endswith('```'):
                        json_text = json_text[:-3]
                    json_text = json_text.strip()
                    
                    try:
                        summary_data = json.loads(json_text)
                        summary_data['status'] = 'success'
                        return summary_data
                    except json.JSONDecodeError:
                        return {
                            "status": "partial_success",
                            "summary": generated_text,
                            "message": "Could not parse structured response"
                        }
            
            return {"status": "error", "message": f"API request failed: {response.status_code}"}
            
        except Exception as e:
            return {"status": "error", "message": f"Summary request failed: {str(e)}"}
    
    def detect_bias_and_manipulation(self, text: str) -> Dict[str, Any]:
        """
        Use AI to detect bias and manipulation techniques in text
        
        Args:
            text: Text to analyze
        
        Returns:
            Dict with bias analysis
        """
        if not self.api_key:
            return {"status": "error", "message": "Gemini API key not configured"}
        
        prompt = f"""
Analyze the following text for bias, manipulation techniques, and propaganda. Look for:

1. Emotional manipulation
2. Loaded language and bias
3. Logical fallacies
4. Cherry-picking or selective facts
5. False dichotomies
6. Appeal to emotions vs. facts

Text to analyze:
{text[:2000]}

Respond in JSON format:
{{
    "bias_level": "[Low|Medium|High]",
    "bias_score": [0.0-1.0],
    "manipulation_techniques": [
        "technique 1",
        "technique 2"
    ],
    "emotional_language": [
        "example 1",
        "example 2"
    ],
    "objectivity_score": [0.0-1.0],
    "recommendations": [
        "recommendation 1",
        "recommendation 2"
    ]
}}

Respond only with the JSON.
        """
        
        try:
            request_data = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.1,
                    "maxOutputTokens": 800,
                }
            }
            
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers={'Content-Type': 'application/json'},
                json=request_data,
                timeout=25
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and result['candidates']:
                    generated_text = result['candidates'][0]['content']['parts'][0]['text']
                    
                    # Parse JSON response
                    json_text = generated_text.strip()
                    if json_text.startswith('```json'):
                        json_text = json_text[7:]
                    if json_text.endswith('```'):
                        json_text = json_text[:-3]
                    json_text = json_text.strip()
                    
                    try:
                        bias_analysis = json.loads(json_text)
                        bias_analysis['status'] = 'success'
                        return bias_analysis
                    except json.JSONDecodeError:
                        return {
                            "status": "error",
                            "message": "Could not parse AI bias analysis",
                            "raw_response": generated_text
                        }
            
            return {"status": "error", "message": f"Bias analysis failed: {response.status_code}"}
            
        except Exception as e:
            return {"status": "error", "message": f"Bias detection failed: {str(e)}"}
